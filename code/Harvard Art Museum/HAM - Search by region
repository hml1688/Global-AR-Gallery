<!DOCTYPE html>
<html lang="zh">
<head>
<meta charset="UTF-8">
<title>Harvard artworks · 区域+年代搜索</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<style>
  body{font-family:Arial,Helvetica,sans-serif;margin:1rem}
  form{margin-bottom:1rem}
  input,select{width:8rem;margin-right:.6rem;padding:.25rem}
  button{padding:.35rem .9rem}
  #grid{display:flex;flex-wrap:wrap;gap:1rem}
  .item{width:230px;text-align:center}
  .item img{width:100%;border-radius:6px;cursor:pointer}
  .msg{margin-top:1rem;font-style:italic}
</style></head><body>

<h2>Harvard Art Museums · Region search</h2>

<form id="qry">
  Region:
  <select id="regionSel">
    <option>Europe</option>
    <option>North and central America</option>
    <option>Asia</option>
    <option>Latin America</option>
    <option>Africa &amp; Oceania</option>
  </select>
  From&nbsp;year: <input id="yearFrom" placeholder="-800" required>
  To&nbsp;year:&nbsp;<input id="yearTo"   placeholder="1200" required>
  <button type="submit">Search</button>
</form>

<div id="grid"></div>
<p class="msg" id="msg"></p>

<script>
/* ======= 配置 ======= */
const APIKEY      = 'd54e083e-a267-40e4-8d55-f1259589be3b';   // ← 换成你的 key
const WANT        = 20;
const BATCH_SIZE  = 100;
const MAX_BATCHES = 5;
const MAX_COUNTRY = 8;

const REGION = {
  "Europe": ["France","Germany","Italy","United Kingdom","England","Netherlands","Spain","Sweden","Russia"],
  "North and central America": ["United States","USA","Mexico","Canada","Guatemala","Cuba"],
  "Asia": ["China","Japan","India","Korea","Iran","Turkey","Thailand","Indonesia"],
  "Latin America": ["Brazil","Argentina","Peru","Chile","Colombia","Ecuador","Bolivia"],
  "Africa & Oceania": ["Nigeria","Egypt","South Africa","Kenya","Ghana","Australia","New Zealand","Fiji","Papua New Guinea"]
};

/* ======= DOM ======= */
const grid=document.getElementById('grid'), msg=document.getElementById('msg');
document.getElementById('qry').addEventListener('submit',e=>{
  e.preventDefault();
  const f=+yearFrom.value, t=+yearTo.value;
  if(isNaN(f)||isNaN(t)){alert('请输入有效年份');return;}
  run(regionSel.value, Math.min(f,t), Math.max(f,t));
});

/* ======= 主流程 ======= */
async function run(region, fromY, toY){
  grid.innerHTML=''; msg.textContent='Loading…';
  const countries=[...REGION[region]]; shuffle(countries);

  const buckets={}, jobs=[];
  for(const c of countries.slice(0,MAX_COUNTRY)){
    jobs.push(loadCountry(c,fromY,toY).then(arr=>{if(arr.length)buckets[c]=arr;}));
  }
  await Promise.all(jobs);

  /* —— 轮询平均抽取 —— */
  const picked=[], seen=new Set();
  while(picked.length<WANT){
    let moved=false;
    for(const arr of Object.values(buckets)){
      while(arr.length && seen.has(arr.at(-1).id)) arr.pop();
      if(arr.length){
        picked.push(arr.pop()); seen.add(picked.at(-1).id); moved=true;
        if(picked.length===WANT) break;
      }
    }
    if(!moved) break;
  }
  if(picked.length<WANT){
    const rest=[]; Object.values(buckets).forEach(a=>rest.push(...a)); shuffle(rest);
    for(const r of rest){if(picked.length===WANT)break;if(seen.has(r.id))continue;
      picked.push(r); seen.add(r.id);}
  }

  if(!picked.length){msg.textContent=`${region} 区域在 ${fromY}–${toY} 无符合条件藏品`;return;}

  shuffle(picked); picked.forEach(drawCard);
  const per={}; picked.forEach(r=>{const p=origin(r); per[p]=(per[p]||0)+1;});
  msg.textContent=`共显示 ${picked.length} 件 (${Object.entries(per).map(([k,n])=>k+' '+n+'件').join('，')}) — 区域：${region}，年代 ${fromY}–${toY}`;
}

/* ======= 每国抓取 ======= */
async function loadCountry(country,f,t){
  const bucket=[];
  const pid=await placeId(country);
  if(!pid) return bucket;
  const fields='id,title,dated,people,place,places,primaryimageurl,images,iiifbaseuri';

  for(let n=0;n<MAX_BATCHES && bucket.length<WANT*5;n++){
    const url=`https://api.harvardartmuseums.org/object?apikey=${APIKEY}`
            +`&place=${pid}&hasimage=1&size=${BATCH_SIZE}&sort=random&fields=${fields}`;
    try{
      const j=await fetch(url).then(r=>r.json());
      (j.records||[]).forEach(o=>{
        if(o.primaryimageurl && dateOk(o.dated,f,t)) bucket.push(o);
      });
      if((j.records||[]).length<BATCH_SIZE) break;
    }catch(e){console.error(e);break;}
  }
  shuffle(bucket);
  return bucket;
}

async function placeId(country){
  try{
    const j=await fetch(`https://api.harvardartmuseums.org/place?apikey=${APIKEY}&size=1&q=${encodeURIComponent(country)}`).then(r=>r.json());
    return j.records?.[0]?.id||null;
  }catch{return null;}
}

/* ======= 日期解析与过滤 ======= */
function dateOk(str,f,t){
  const rng=parseYearRange(str);
  if(!rng) return false;
  return !(rng[1]<f || rng[0]>t);
}

function parseYearRange(str){
  if(!str) return null;
  str=str.toLowerCase();

  const yrs=[];

  /* 1️⃣ millennium BCE */
  str.replace(/(\d+)(?:st|nd|rd|th)?\s+millennium\s*(bce|bc|ce|ad)?/g,(m,n,era)=>{
    const s=(era&&/bce|bc/.test(era))?-n*1000:n*1000-999;
    const e=s+999*(s<0?-1:1);
    yrs.push(Math.min(s,e),Math.max(s,e));
  });

  /* 2️⃣ century RANGE e.g. 12th-11th century BCE */
  str.replace(/(\d+)(?:st|nd|rd|th)?\s*-\s*(\d+)(?:st|nd|rd|th)?\s+century\s*(bce|bc|ce|ad)?/g,(m,a,b,era)=>{
    const s=(a-1)*100, e=(b-1)*100+99;
    if(era&&/bce|bc/.test(era)){yrs.push(-e,-s);}else{yrs.push(s,e);}
  });

  /* 3️⃣ single century with modifier */
  str.replace(/(early|mid|late)?\s*(\d+)(?:st|nd|rd|th)?\s+century\s*(bce|bc|ce|ad)?/g,(m,mod,n,era)=>{
    let s=(n-1)*100, e=s+99;
    if(mod==='early') e=s+49;
    if(mod==='late')  s+=50;
    if(mod==='mid'){ s+=25; e-=25; }
    if(era&&/bce|bc/.test(era)){yrs.push(-e,-s);}else{yrs.push(s,e);}
  });

  /* 4️⃣ numeric RANGE (1000-800 BCE) */
  str.replace(/(\d{1,4})\s*[-–—]\s*(\d{1,4})\s*(bce|bc|ce|ad)?/g,(m,a,b,era)=>{
    let s=+a, e=+b;
    if(era&&/bce|bc/.test(era)){s=-s;e=-e;}
    yrs.push(Math.min(s,e),Math.max(s,e));
  });

  /* 5️⃣ circa / single year */
  str.replace(/c\.?\s*(\d{1,4})\s*(bce|bc|ce|ad)?/g,(m,y,era)=>{
    y=+y; if(era&&/bce|bc/.test(era)) y=-y;
    yrs.push(y,y);
  });

  if(!yrs.length) return null;
  return [Math.min(...yrs),Math.max(...yrs)];
}

/* ======= 渲染 ======= */
function origin(r){return r.place || r.places?.[0]?.displayname || 'Unknown';}
function drawCard(r){
  const img=r.primaryimageurl || r.images?.[0]?.baseimageurl,
        iiif=r.images?.[0]?.iiifbaseuri,
        title=r.title||'(object)',
        date=r.dated||'',
        maker=r.people?.[0]?.displayname||'',
        place=origin(r);
  grid.insertAdjacentHTML('beforeend',`
    <div class="item">
      <img src="${img}" alt="${title}" ${iiif?`onclick="window.open('${iiif}/full/768,/0/default.jpg')"`:''}>
      <p>
        <strong>Name:</strong> ${title}<br>
        <strong>Date:</strong> ${date}<br>
        <strong>Artist/Maker:</strong> ${maker}<br>
        <strong>Place&nbsp;of&nbsp;origin:</strong> ${place}
      </p>
    </div>`);
}

/* ======= 工具 ======= */
function shuffle(a){for(let i=a.length-1;i>0;i--){const j=Math.random()*(i+1)|0;[a[i],a[j]]=[a[j],a[i]];}}
</script>
</body></html>
